// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/categories": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get list of categories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "in format YYYY-MM-DDT00:00:00Z",
                        "name": "date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "array of category readings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Category"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Returns error if exists and 200 if success",
                "parameters": [
                    {
                        "description": "Category Name",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "category object",
                        "schema": {
                            "$ref": "#/definitions/usecase.Category"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Returns 204 if success and 4xx error if failed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "new category name",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UpdateCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated"
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Soft delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/is-authenticated": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Returns user info if authorized",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Returns info about user",
                "parameters": [
                    {
                        "description": "User Credentials",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Removes cookie if set",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/clothes": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clothes"
                ],
                "summary": "Returns list of clothes",
                "responses": {
                    "200": {
                        "description": "List of clothes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Clothes"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clothes"
                ],
                "parameters": [
                    {
                        "description": "clothes object",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddClothesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "clothes object",
                        "schema": {
                            "$ref": "#/definitions/domain.Clothes"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/clothes/{id}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clothes"
                ],
                "summary": "Soft delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Clothes ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "clothes object",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/DeleteClothesRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns error or 201 status code if success",
                "parameters": [
                    {
                        "description": "User",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/request.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/response.User"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns error or 200 status code if success",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "description": "User",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/request.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Catering user",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns error or 204 status code if success",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AddCategoryRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2020-06-29T00:00:00Z"
                },
                "name": {
                    "type": "string",
                    "example": "закуски"
                }
            }
        },
        "AddClothesRequest": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "stock": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "DeleteClothesRequest": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "admin@mail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "Password12!"
                }
            }
        },
        "UpdateCategoryRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "веган"
                }
            }
        },
        "domain.Category": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.Clothes": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "stock": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "request.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "razor3538@mail.ru"
                },
                "firstName": {
                    "type": "string",
                    "example": "Edos"
                },
                "lastName": {
                    "type": "string",
                    "example": "Gaifut"
                }
            }
        },
        "request.UserUpdate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "razzzor3538@mail.ru"
                },
                "firstName": {
                    "type": "string",
                    "example": "Eduard"
                },
                "lastName": {
                    "type": "string",
                    "example": "Gaifutdinov"
                }
            }
        },
        "response.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "usecase.Category": {
            "type": "object"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "ZooArk",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
